@page "/roles"
@using System.Globalization
@using BackOffice.Client.Services
@using BackOffice.Shared.Models
@inject IDialogService DialogService
@inject IUserProfilePermissionsRoleService RoleService;

<div class="d-flex justify-end flex-grow-1 gap-4 pb-2">
    <MudButton Variant="Variant.Filled"
               OnClick="@(_ => OpenModal(null))"
               StartIcon="@Icons.Material.Filled.AddChart"
               Color="Color.Dark">
       Add Role
    </MudButton>
</div>

<MudTable Items="@_roles" Loading="_isLoading" T="RoleModel" Elevation="1" Dense="@dense" Hover="@hover" OnRowClick="OnRowClick" Bordered="@bordered" Filter="new Func<RoleModel,bool>(FilterFunc1)" Striped="@striped" @bind-SelectedItem="selectedRole1">
      <ToolBarContent>
        <div class="w-30">
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col style="width: 60%;" />
        <col style="width: 60px;" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr.</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Permissions</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Number">@context.Number</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Permissions">
            <MudTooltip>
                <ChildContent>
                    @if (context.Permissions.Count > 0)
                    {
                        @foreach (var permission in context.Permissions)
                        {
                            @switch (permission.Code)
                            {
                                case "#001":
                                    <MudIcon Icon="@Icons.Material.Filled.Attribution" Color="Color.Primary" />
                                    break;
                                case "#002":
                                    <MudIcon Icon="@Icons.Material.Filled.FeaturedPlayList" Color="Color.Primary" />
                                    break;
                                case "#003":
                                    <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Primary" />
                                    break;
                                default:
                                    <MudIcon Icon="@Icons.Material.Filled.DisabledByDefault" Color="Color.Primary" />;
                                    break;
                            }
                        }
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Pix" Color="Color.Primary" />
                    }

                </ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.h6">Permissions</MudText>
                    <MudList >
                        @foreach (var permission in context.Permissions)
                        {
                            <MudListItem Text="@(permission.Name + ": " + permission.Description)" />
                        }
                    </MudList>

                </TooltipContent>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                <MudMenuItem><MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenModal(context)" /></MudMenuItem>
                <MudMenuItem><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => DeleteRole(context)" /></MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
        <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @selectedRole1?.Name</MudText>
    </div>
</div>


@code {
    private bool _isLoading = false;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private RoleModel selectedRole1 = null;

    private static IEnumerable<RoleModel> _roles = new List<RoleModel>();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            _roles = await RoleService.GetUserProfileRoles();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    readonly DialogOptions _modalOptions = new() { CloseButton = true };

    private async Task OpenModal(RoleModel? role)
    {
        if (role == null)
        {
            await ShowModal("Add role");
        }
        else
        {
            var parameters = new DialogParameters<RoleModal.RoleModal> { { x => x.Role, role } };
            await ShowModal("Edit role", parameters);
        }
    }

    private async Task ShowModal(string title, DialogParameters<RoleModal.RoleModal>? parameters = null)
    {
        var dialog = parameters == null
            ? await DialogService.ShowAsync<RoleModal.RoleModal>(title, _modalOptions)
            : await DialogService.ShowAsync<RoleModal.RoleModal>(title, parameters, _modalOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task DeleteRole(RoleModel? role)
    {
        if (role != null)
        {
            await RoleService.DeleteUserProfileRole(role.Id.Value);
            await OnInitializedAsync();
        }
    }

    private bool FilterFunc1(RoleModel role) => FilterFunc(role, searchString1);

    private bool FilterFunc(RoleModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Number.HasValue && element.Number.Value == int.Parse(searchString))
            return true;
        return false;
    }

    async Task OnRowClick(TableRowClickEventArgs<RoleModel> args)
    {
       await OpenModal(args.Item);
    }
}
