@page "/login"
@using SharedData.Models
@using BackOffice.Client.Services.Implementation
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<PageTitle>Login</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Login</h3>
            <EditForm Model="loginParameters" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />

                <div class="form-floating mb-3">
                    <InputText id="inputUsername" class="form-control" @bind-Value="loginParameters.UserName" autofocus placeholder="Username" />
                    <label for="inputUsername">Username</label>
                    <ValidationMessage For="@(() => loginParameters.UserName)" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginParameters.Password" />
                    <label for="inputPassword">Password</label>
                    <ValidationMessage For="@(() => loginParameters.Password)" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="loginParameters.RememberMe" />
                    <label class="form-check-label" for="inputRememberMe">Remember me</label>
                </div>

                <button type="submit" class="btn btn-primary w-100">Sign in</button>

                <div class="text-danger mt-3">@error</div>

                <hr class="my-4" />

                <div class="text-center">
                    <NavLink href="register" class="text-decoration-none">Create account</NavLink>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    LoginParameters loginParameters { get; set; } = new LoginParameters();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
