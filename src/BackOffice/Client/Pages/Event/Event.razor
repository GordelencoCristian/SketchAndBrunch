@page "/events"

@using BackOffice.Client.Services
@using BackOffice.Shared.Models
@using System.Formats.Asn1

@inject IDialogService DialogService
@inject IEventService EventService;

<h3>Events</h3>

<div class="d-flex justify-end flex-grow-1 gap-4 pb-2">
    <MudButton Variant="Variant.Filled"
               OnClick="@(_ => OpenModal(null))"
               StartIcon="@Icons.Material.Filled.AddChart"
               Color="Color.Dark">
        Add Event
    </MudButton>
</div>

<MudTable Items="@_events" Loading="_isLoading" T="EventModel" Elevation="1" Dense="@dense" Hover="@hover" OnRowClick="OnRowClick" Bordered="@bordered" Filter="new Func<EventModel,bool>(FilterFunc1)" Striped="@striped">
    <ToolBarContent>
        <div class="w-30">
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="text-center">Name</MudTh>
        <MudTh Class="text-center">EventTime</MudTh>
        <MudTh Class="text-center">Description</MudTh>
        <MudTh Class="text-center">NumberOfparticipants</MudTh>
        <MudTh Class="text-center">Location</MudTh>
        <MudTh Class="text-end">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name" Class="text-center">@context.Name</MudTd>
        <MudTd DataLabel="EventTime" Class="text-center">@context.EventTime</MudTd>
        <MudTd DataLabel="Description" Class="text-center">@context.Description</MudTd>
        <MudTd DataLabel="NumberOfparticipants" Class="text-center">@context.NumberOfparticipants</MudTd>
        <MudTd DataLabel="Location" Class="text-center">
            @context.Location.Name (@context.Location.Adress)
        </MudTd>
            <MudTd Class="text-end">
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                    <MudMenuItem><MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenModal(context)" /></MudMenuItem>
                    <MudMenuItem><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => Delete(context)" /></MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private bool _isLoading = false;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private static IEnumerable<EventModel> _events = new List<EventModel>();

    readonly DialogOptions _modalOptions = new() { CloseButton = true };


    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            _events = await EventService.GetEvents();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    async Task OnRowClick(TableRowClickEventArgs<EventModel> args)
    {
        await OpenModal(args.Item);
    }

    private async Task OpenModal(EventModel? location)
    {
        if (location == null)
        {
            await ShowModal("Add event");
        }
        else
        {
            var parameters = new DialogParameters<EventModal.EventModal> { { x => x.Event, location } };
            await ShowModal("Edit event", parameters);
        }
    }

    private async Task ShowModal(string title, DialogParameters<EventModal.EventModal>? parameters = null)
    {
        var dialog = parameters == null
            ? await DialogService.ShowAsync<EventModal.EventModal>(title, _modalOptions)
            : await DialogService.ShowAsync<EventModal.EventModal>(title, parameters, _modalOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task Delete(EventModel model)
    {
        await EventService.DeleteEvent(model.Id.Value);
        await OnInitializedAsync();

    }

    private bool FilterFunc1(EventModel role) => FilterFunc(role, searchString1);

    private bool FilterFunc(EventModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        // if (element.Number.HasValue && element.Number.Value == int.Parse(searchString))
        //     return true;
        return false;
    }
}
