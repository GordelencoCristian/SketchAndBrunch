@page "/locations"

@using BackOffice.Client.Services
@using BackOffice.Shared.Models
@using System.Formats.Asn1

@inject IDialogService DialogService
@inject ILocationService LocationService;

<h3>Location</h3>

<div class="d-flex justify-end flex-grow-1 gap-4 pb-2">
    <MudButton Variant="Variant.Filled"
               OnClick="@(_ => OpenModal(null))"
               StartIcon="@Icons.Material.Filled.AddChart"
               Color="Color.Dark">
        Add Location
    </MudButton>
</div>

<MudTable Items="@_locations" Loading="_isLoading" T="LocationModel" Elevation="1" Dense="@dense" Hover="@hover" OnRowClick="OnRowClick" Bordered="@bordered" Filter="new Func<LocationModel,bool>(FilterFunc1)" Striped="@striped">
    <ToolBarContent>
        <div class="w-30">
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="text-center">Name</MudTh>
        <MudTh Class="text-center">Adress</MudTh>
        <MudTh Class="text-end">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name" Class="text-center">@context.Name</MudTd>
            <MudTd DataLabel="Adress" Class="text-center">@context.Adress</MudTd>
            <MudTd Class="text-end">
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                <MudMenuItem><MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenModal(context)" /></MudMenuItem>
                    <MudMenuItem><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => Delete(context)" /></MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

    @code {
    private bool _isLoading = false;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private static IEnumerable<LocationModel> _locations = new List<LocationModel>();

    readonly DialogOptions _modalOptions = new() { CloseButton = true };


    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            _locations = await LocationService.GetLocations();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    async Task OnRowClick(TableRowClickEventArgs<LocationModel> args)
    {
        await OpenModal(args.Item);
    }

    private async Task OpenModal(LocationModel? location)
    {
        if (location == null)
        {
            await ShowModal("Add location");
        }
        else
        {
            var parameters = new DialogParameters<LocationModal.LocationModal> { { x => x.Location, location } };
            await ShowModal("Edit location", parameters);
        }
    }

    private async Task ShowModal(string title, DialogParameters<LocationModal.LocationModal>? parameters = null)
    {
        var dialog = parameters == null
            ? await DialogService.ShowAsync<LocationModal.LocationModal>(title, _modalOptions)
            : await DialogService.ShowAsync<LocationModal.LocationModal>(title, parameters, _modalOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task Delete(LocationModel model)
    {
        await LocationService.DeleteLocation(model.Id.Value);
        await OnInitializedAsync();

    }

    private bool FilterFunc1(LocationModel role) => FilterFunc(role, searchString1);

    private bool FilterFunc(LocationModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        // if (element.Number.HasValue && element.Number.Value == int.Parse(searchString))
        //     return true;
        return false;
    }
}
