@page "/users"
@using BackOffice.Client.Services
@using BackOffice.Shared.Models
@inject IDialogService DialogService

@inject HttpClient httpClient
@inject IAuthorizeApi _AuthorizeApi
@inject IUserProfileService UserProfileService

<div class="d-flex justify-end flex-grow-1 gap-4 pb-2">
    <MudButton
        Variant="Variant.Filled"
        OnClick="@(_ => OpenModal(null))"
        StartIcon="@Icons.Material.Filled.PersonAdd"
        Color="Color.Dark">
        Add User
    </MudButton>
</div>

<MudTable Items="@_userProfiles" Loading="_isLoading" T="UserProfileModel" Elevation="1" Dense="@dense" Hover="@hover" OnRowClick="OnRowClick" Bordered="@bordered" Filter="new Func<UserProfileModel,bool>(FilterFunc1)" Striped="@striped" @bind-SelectedItem="selectedUser1">
    <ToolBarContent>
        <div class="w-30">
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr.</MudTh>
        <MudTh>FirstName</MudTh>
        <MudTh>LastName</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Birthday</MudTh>
        <MudTh>PhoneNumber</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Number">@context.Number</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Role">@context.Role.Name</MudTd>
        <MudTd DataLabel="Birthday">@context.BirthDay</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                <MudMenuItem Icon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" IconSize="Size.Small" OnClick="() => OpenModal(context)">
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" IconSize="Size.Small" OnClick="() => DeleteUser(context)">
                </MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @selectedUser1?.Email</MudText>
    </div>
</div>


@code {
    private bool _isLoading = false;

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private UserProfileModel selectedUser1 = null;

    private static IEnumerable<UserProfileModel> _userProfiles = new List<UserProfileModel>();

    protected override async Task OnInitializedAsync()
    {
          _isLoading = true;
          StateHasChanged();

          try
          {
              _userProfiles = await UserProfileService.GetUserProfiles();

          }
          finally
          {
              _isLoading = false;
              StateHasChanged();
          }
    }

    async Task OnRowClick(TableRowClickEventArgs<UserProfileModel> args)
    {
        await OpenModal(args.Item);
    }

    private bool FilterFunc1(UserProfileModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UserProfileModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Role.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task DeleteUser(UserProfileModel? user)
    {
        if (user != null)
        {
            await UserProfileService.DeleteUserProfileRole(user.Id);
            await OnInitializedAsync();
        }
    }
}